% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_prior.R
\name{build_prior}
\alias{build_prior}
\title{Build Prior Method for C_bass and Cfg_bass}
\usage{
build_prior(
  dist,
  lower = -Inf,
  upper = Inf,
  mu = NULL,
  sigma = NULL,
  shape1 = NULL,
  shape2 = NULL,
  shape = NULL,
  scale = NULL,
  weights = NULL
)
}
\arguments{
\item{dist}{A vector of length p. Valid entries include "uniform", "normal", "beta", "gamma".}

\item{lower}{A p-vector of lower truncation bounds. `-Inf` is a valid entry.}

\item{upper}{A p-vector of lower truncation bounds. `Inf` is a valid entry.}

\item{mu}{A p-vector of means (used for normal/truncated normal only)}

\item{sigma}{A p-vector of sds (used for normal/truncated normal only)}

\item{shape1}{A p-vector of shape1 parameters for beta prior}

\item{shape2}{A p-vector of shape2 parameters for beta prior}

\item{shape}{A p-vector of shape parameters for gamma prior}

\item{scale}{A p-vector of scale parameters for gamma prior}

\item{weights}{A vector of mixture weights of the same dimension as dist.}
}
\value{
a list which can be passed into C_bass or Cfg_bass as a prior.
}
\description{
A method for building priors of the form needed in `C_bass`, `Cfg_bass` and similar functions.
For mixture distributions, all arguments (except for lower and upper) should be matrices (with nrow equal to the number of mixture components) rather than vectors.
}
\details{
Builds a list for passing to the \code{coactivity} functions. List contains one component per input variable.
The \code{dist} argument must be passed in full, but all other values can be scalars (and will be reshaped accordingly).
Truncation bounds cannot vary by mixture component. See examples below.
}
\examples{
# standard uniform priors for 5 inputs
build_prior(rep("uniform", 5), lower=0, upper=1)

# truncated normals with different means for each input
mu_vec <- c(0.4, 0.5, 0.3, 0.7, 0.5)
build_prior(rep("normal", 5), lower=0, upper=1,
            mean=mu_vec, sd=0.1)

# A mixture of normals (p=4)
mu_mat = matrix(c(0.4, 0.5, NA,
                0.5, NA, NA,
                0.25, 0.5, 0.75,
                0.4, 0.5, 0.8),
                ncol=3, byrow=TRUE)
weights_mat = matrix(c(2, 3, 0,
                1, 0, 0,
                1, 1, 1,
                1, 1, 10),
                ncol=3, byrow=TRUE)
build_prior(matrix("normal", nrow=4, ncol=3),
            lower=-Inf, upper=Inf,
            mean=mu_mat, sd=0.1,
            weights=weights_mat)

}
